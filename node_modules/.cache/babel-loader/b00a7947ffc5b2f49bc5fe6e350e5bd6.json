{"ast":null,"code":"var _jsxFileName = \"/Users/rosariodominguezm/Desktop/Octavo Semestre/Tecnologi\\u0301as y aplicaciones web/grupo-grupo-web-1-frontend/simulador/src/components/ReglasNegocio.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ReglasNegocio() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column\",\n      id: \"contenedor_rn\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Reglas de Negocio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 4,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Quieres saber c\\xF3mo interactua la p\\xE1gina con las interacciones del usuario? Tanto su front-end como back-end... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Aqu\\xED te lo explicamos: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column\",\n      id: \"contenedor_rn2\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Login y Registro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Para el login y registro el usuario ingresa sus datos, los cuales se env\\xEDan mediante Axios al back-end. El back-end recibe esta informaci\\xF3n mediante un m\\xE9todo POST que ingresa los datos a la base de datos en caso de registro y comprueba la existencia del usuario en caso de login. En ambos casos se validan los datos, tanto existencia como formato, en el back-end y se env\\xEDa una respuesta al front-end. En caso de que el usuario no exista o los datos no cumplan con el formato, se le notifica al usuario y se levanta el respectivo error. En caso de que el usuario exista y los datos cumplan con el formato, se le notifica al usuario y el back-end env\\xEDa al front qu\\xE9 usuario es el actual. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column\",\n      id: \"contenedor_rn3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Simulaci\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" En la simulaci\\xF3n funciona similar. Un usuario ya ingresado realiza una simulaci\\xF3n, la cual el front-end recibe con los botones e interacciones y las env\\xEDa al back-end para que sean evaluadas y que encuentre en la base de datos qu\\xE9 producto se obtuvo. Con ello, el\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_c = ReglasNegocio;\nexport default ReglasNegocio;\nvar _c;\n$RefreshReg$(_c, \"ReglasNegocio\");","map":{"version":3,"names":["ReglasNegocio"],"sources":["/Users/rosariodominguezm/Desktop/Octavo Semestre/Tecnologías y aplicaciones web/grupo-grupo-web-1-frontend/simulador/src/components/ReglasNegocio.js"],"sourcesContent":["function ReglasNegocio(){\n    return <>\n     <div className = \"column\" id=\"contenedor_rn\">\n            <h1>Reglas de Negocio</h1>\n                \n            <p> Quieres saber cómo interactua la página con las interacciones del usuario? Tanto su front-end como back-end... </p>\n            <p> Aquí te lo explicamos: </p>\n    </div>\n    <div className = \"column\" id=\"contenedor_rn2\">\n            <h3>Login y Registro</h3>  \n            <p> Para el login y registro el usuario ingresa sus datos, los cuales se envían mediante Axios al back-end. \n                El back-end recibe esta información mediante un método POST que ingresa los datos a la base de datos en caso de registro\n                y comprueba la existencia del usuario en caso de login. En ambos casos se validan los datos, tanto existencia como formato, en el back-end\n                y se envía una respuesta al front-end. En caso de que el usuario no exista o los datos no cumplan con el formato, se le notifica al usuario y se levanta el respectivo error.\n                En caso de que el usuario exista y los datos cumplan con el formato, se le notifica al usuario y el back-end envía al front qué usuario es el actual. </p>\n    </div>\n    <div className = \"column\" id=\"contenedor_rn3\">\n            <h3>Simulación</h3>  \n            <p> En la simulación funciona similar. Un usuario ya ingresado realiza una simulación, la cual el front-end recibe con los botones e interacciones\n                y las envía al back-end para que sean evaluadas y que encuentre en la base de datos qué producto se obtuvo. Con ello, el \n            </p>\n    </div>\n    </>\n}\n\n\n\nexport default ReglasNegocio;"],"mappings":";;;AAAA,SAASA,aAAa,GAAE;EACpB,oBAAO;IAAA,wBACN;MAAK,SAAS,EAAG,QAAQ;MAAC,EAAE,EAAC,eAAe;MAAA,wBACrC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA0B,eAE1B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAuH,eACvH;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA+B;IAAA;MAAA;MAAA;MAAA;IAAA,QACjC,eACN;MAAK,SAAS,EAAG,QAAQ;MAAC,EAAE,EAAC,gBAAgB;MAAA,wBACrC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAyB,eACzB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAI8J;IAAA;MAAA;MAAA;MAAA;IAAA,QAChK,eACN;MAAK,SAAS,EAAG,QAAQ;MAAC,EAAE,EAAC,gBAAgB;MAAA,wBACrC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAmB,eACnB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAEI;IAAA;MAAA;MAAA;MAAA;IAAA,QACN;EAAA,gBACH;AACP;AAAC,KAvBQA,aAAa;AA2BtB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{},"sourceType":"module"}