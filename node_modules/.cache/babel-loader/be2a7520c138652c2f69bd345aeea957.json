{"ast":null,"code":"var _jsxFileName = \"/Users/rosariodominguezm/Desktop/Octavo Semestre/Tecnologi\\u0301as y aplicaciones web/grupo-web-frontend/src/components/ReglasNegocio.js\";\nimport React from 'react';\nfunction ReglasNegocio() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column\",\n    id: \"contenedor_rn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 13\n    }\n  }, \"Reglas de Negocio\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }\n  }, \" Quieres saber c\\xF3mo interactua la p\\xE1gina con las interacciones del usuario? Tanto su front-end como back-end... Aqu\\xED te lo explicamos: \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column\",\n    id: \"contenedor_rn2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }, \"Login y Registro\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, \" Para el login y registro el usuario ingresa sus datos, los cuales se env\\xEDan mediante Axios al back-end. El back-end recibe esta informaci\\xF3n mediante un m\\xE9todo POST que ingresa los datos a la base de datos en caso de registro y comprueba la existencia del usuario en caso de login. En ambos casos se validan los datos, tanto existencia como formato, en el back-end y se env\\xEDa una respuesta al front-end. Para el log In se comprueba que el usuario exista y que la contrase\\xF1a sea correcta. En caso de que no se cumpla alguna de estas condiciones se env\\xEDa un mensaje de error al front-end el cual se muestra al usuario como una alerta. Para el caso del registro se comprueba que el usuario no exista y que el formato de los datos sea correcto. En caso de que no se cumpla alguna de estas condiciones se env\\xEDa un mensaje de error al front-end el cual se muestra al usuario como una alerta. \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column\",\n    id: \"contenedor_rn2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, \"Simulaci\\xF3n\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, \" En la simulaci\\xF3n funciona similar. Un usuario ya ingresado realiza una simulaci\\xF3n, la cual el front-end recibe con los botones e interacciones y las env\\xEDa al back-end para que sean evaluadas y que encuentre en la base de datos qu\\xE9 producto se obtuvo. Esto mediante un POST del back-end. Con ello, el back-end env\\xEDa al front-end el resultado de la simulaci\\xF3n. Este resultado se le muestra al usuario, quien adem\\xE1s en el front-end puede ver el historial de simulaciones, el cual se saca de las bases de datos mediante un GET con el back-end.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column\",\n    id: \"contenedor_rn2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, \"\\xBFC\\xF3mo probarlo?\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, \" El login puede usarse con el usuario: ian@gmail.com, con clave: 123456. O tambi\\xE9n puedes registrarte y luego hacer login.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \" La simulaci\\xF3n se ocupa apretando los botones y con ello, viendo qu\\xE9 se genera. Distintas combinaciones generan distintos resultados. \")));\n}\nexport default ReglasNegocio;","map":{"version":3,"names":["React","ReglasNegocio"],"sources":["/Users/rosariodominguezm/Desktop/Octavo Semestre/Tecnologías y aplicaciones web/grupo-web-frontend/src/components/ReglasNegocio.js"],"sourcesContent":["import React from 'react';\nfunction ReglasNegocio(){\n    return <>\n     <div className = \"column\" id=\"contenedor_rn\">\n            <h1>Reglas de Negocio</h1>\n                \n            <p> Quieres saber cómo interactua la página con las interacciones del usuario? Tanto su front-end como back-end... \n            Aquí te lo explicamos: </p>\n    </div>\n    <div className = \"column\" id=\"contenedor_rn2\">\n            <h3>Login y Registro</h3>  \n            <p> Para el login y registro el usuario ingresa sus datos, los cuales se envían mediante Axios al back-end. \n                El back-end recibe esta información mediante un método POST que ingresa los datos a la base de datos en caso de registro\n                y comprueba la existencia del usuario en caso de login. En ambos casos se validan los datos, tanto existencia como formato, en el back-end\n                y se envía una respuesta al front-end. \n                            Para el log In se comprueba que el usuario exista y que la contraseña sea correcta. En caso de que no se cumpla alguna de estas condiciones se envía un mensaje de error al front-end el cual se muestra al usuario como una alerta.\n                            Para el caso del registro se comprueba que el usuario no exista y que el formato de los datos sea correcto. En caso de que no se cumpla alguna de estas condiciones se envía un mensaje de error al front-end el cual se muestra al usuario como una alerta. </p>\n    </div>\n    <div className = \"column\" id=\"contenedor_rn2\">\n            <h3>Simulación</h3>  \n            <p> En la simulación funciona similar. Un usuario ya ingresado realiza una simulación, la cual el front-end recibe con los botones e interacciones\n                y las envía al back-end para que sean evaluadas y que encuentre en la base de datos qué producto se obtuvo. Esto mediante un POST del back-end. \n                Con ello, el back-end envía al front-end el resultado de la simulación. Este resultado se le muestra al usuario, quien además en el front-end puede ver el historial\n                de simulaciones, el cual se saca de las bases de datos mediante un GET con el back-end.</p>\n    </div>\n    <div className = \"column\" id=\"contenedor_rn2\">\n            <h3>¿Cómo probarlo?</h3>  \n            <p> El login puede usarse con el usuario: ian@gmail.com, con clave: 123456. O también puedes registrarte y luego hacer login.</p>\n            <p> La simulación se ocupa apretando los botones y con ello, viendo qué se genera. Distintas combinaciones generan distintos resultados. </p>\n    </div>\n    </>\n}\n\n\n\nexport default ReglasNegocio;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,GAAE;EACpB,oBAAO,uDACN;IAAK,SAAS,EAAG,QAAQ;IAAC,EAAE,EAAC,eAAe;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACrC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,uBAA0B,eAE1B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,sJAC2B,CAC7B,eACN;IAAK,SAAS,EAAG,QAAQ;IAAC,EAAE,EAAC,gBAAgB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACrC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,sBAAyB,eACzB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,i5BAKiR,CACnR,eACN;IAAK,SAAS,EAAG,QAAQ;IAAC,EAAE,EAAC,gBAAgB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACrC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,mBAAmB,eACnB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,ujBAG+F,CACjG,eACN;IAAK,SAAS,EAAG,QAAQ;IAAC,EAAE,EAAC,gBAAgB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACrC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,2BAAwB,eACxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,mIAAiI,eACjI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,kJAA6I,CAC/I,CACH;AACP;AAIA,eAAeA,aAAa"},"metadata":{},"sourceType":"module"}